// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The data source resource allows a data source to be created on a Grafana server.
 * 
 * ## Example Usage
 * 
 * The required arguments for this resource vary depending on the type of data
 * source selected (via the `type` argument). The following example is for
 * InfluxDB. See
 * [Grafana's *Data Sources Guides*](http://docs.grafana.org/#data-sources-guides)
 * for more details on the supported data source types and the arguments they use.
 * 
 * For an InfluxDB datasource:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumi/grafana";
 * 
 * const metrics = new grafana.DataSource("metrics", {
 *     databaseName: influxdb_database_metrics.name,
 *     password: "foobarbaz",
 *     type: "influxdb",
 *     url: "http://influxdb.example.net:8086/",
 *     username: "myapp",
 * });
 * ```
 * 
 * For a CloudWatch datasource:
 * 
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as grafana from "@pulumi/grafana";
 * 
 * const testCloudwatch = new grafana.DataSource("testCloudwatch", {
 *     jsonDatas: [{
 *         authType: "keys",
 *         defaultRegion: "us-east-1",
 *     }],
 *     secureJsonDatas: [{
 *         accessKey: "123",
 *         secretKey: "456",
 *     }],
 *     type: "cloudwatch",
 * });
 * ```
 *
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-grafana/blob/master/website/docs/r/data_source.html.markdown.
 */
export class DataSource extends pulumi.CustomResource {
    /**
     * Get an existing DataSource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataSourceState, opts?: pulumi.CustomResourceOptions): DataSource {
        return new DataSource(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'grafana:index/dataSource:DataSource';

    /**
     * Returns true if the given object is an instance of DataSource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataSource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataSource.__pulumiType;
    }

    /**
     * The method by which the browser-based Grafana
     * application will access the data source. The default is "proxy", which means
     * that the application will make requests via a proxy endpoint on the Grafana
     * server.
     */
    public readonly accessMode!: pulumi.Output<string | undefined>;
    /**
     * - If true, HTTP basic authentication will
     * be used to make requests.
     */
    public readonly basicAuthEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * The
     * password to use for basic auth.
     */
    public readonly basicAuthPassword!: pulumi.Output<string | undefined>;
    /**
     * The
     * username to use for basic auth.
     */
    public readonly basicAuthUsername!: pulumi.Output<string | undefined>;
    /**
     * The name of the
     * database to use on the selected data source server.
     */
    public readonly databaseName!: pulumi.Output<string | undefined>;
    /**
     * If true, the data source will be the default
     * source used by the Grafana server. Only one data source on a server can be
     * the default.
     */
    public readonly isDefault!: pulumi.Output<boolean | undefined>;
    /**
     * The default region
     * and authentication type to access the data source. `jsonData` is documented
     * in more detail below.
     */
    public readonly jsonDatas!: pulumi.Output<outputs.DataSourceJsonData[] | undefined>;
    /**
     * A unique name for the data source within the Grafana
     * server.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password to use to
     * authenticate to the data source.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The access and
     * secret keys required to access the data source. `secureJsonData` is
     * documented in more detail below.
     */
    public readonly secureJsonDatas!: pulumi.Output<outputs.DataSourceSecureJsonData[] | undefined>;
    /**
     * The data source type. Must be one of the data source
     * keywords supported by the Grafana server.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The URL for the data source. The type of URL required
     * varies depending on the chosen data source type.
     */
    public readonly url!: pulumi.Output<string | undefined>;
    /**
     * The username to use to
     * authenticate to the data source.
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a DataSource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataSourceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataSourceArgs | DataSourceState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as DataSourceState | undefined;
            inputs["accessMode"] = state ? state.accessMode : undefined;
            inputs["basicAuthEnabled"] = state ? state.basicAuthEnabled : undefined;
            inputs["basicAuthPassword"] = state ? state.basicAuthPassword : undefined;
            inputs["basicAuthUsername"] = state ? state.basicAuthUsername : undefined;
            inputs["databaseName"] = state ? state.databaseName : undefined;
            inputs["isDefault"] = state ? state.isDefault : undefined;
            inputs["jsonDatas"] = state ? state.jsonDatas : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["secureJsonDatas"] = state ? state.secureJsonDatas : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["url"] = state ? state.url : undefined;
            inputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as DataSourceArgs | undefined;
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["accessMode"] = args ? args.accessMode : undefined;
            inputs["basicAuthEnabled"] = args ? args.basicAuthEnabled : undefined;
            inputs["basicAuthPassword"] = args ? args.basicAuthPassword : undefined;
            inputs["basicAuthUsername"] = args ? args.basicAuthUsername : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["isDefault"] = args ? args.isDefault : undefined;
            inputs["jsonDatas"] = args ? args.jsonDatas : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["secureJsonDatas"] = args ? args.secureJsonDatas : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["url"] = args ? args.url : undefined;
            inputs["username"] = args ? args.username : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(DataSource.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataSource resources.
 */
export interface DataSourceState {
    /**
     * The method by which the browser-based Grafana
     * application will access the data source. The default is "proxy", which means
     * that the application will make requests via a proxy endpoint on the Grafana
     * server.
     */
    readonly accessMode?: pulumi.Input<string>;
    /**
     * - If true, HTTP basic authentication will
     * be used to make requests.
     */
    readonly basicAuthEnabled?: pulumi.Input<boolean>;
    /**
     * The
     * password to use for basic auth.
     */
    readonly basicAuthPassword?: pulumi.Input<string>;
    /**
     * The
     * username to use for basic auth.
     */
    readonly basicAuthUsername?: pulumi.Input<string>;
    /**
     * The name of the
     * database to use on the selected data source server.
     */
    readonly databaseName?: pulumi.Input<string>;
    /**
     * If true, the data source will be the default
     * source used by the Grafana server. Only one data source on a server can be
     * the default.
     */
    readonly isDefault?: pulumi.Input<boolean>;
    /**
     * The default region
     * and authentication type to access the data source. `jsonData` is documented
     * in more detail below.
     */
    readonly jsonDatas?: pulumi.Input<pulumi.Input<inputs.DataSourceJsonData>[]>;
    /**
     * A unique name for the data source within the Grafana
     * server.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The password to use to
     * authenticate to the data source.
     */
    readonly password?: pulumi.Input<string>;
    /**
     * The access and
     * secret keys required to access the data source. `secureJsonData` is
     * documented in more detail below.
     */
    readonly secureJsonDatas?: pulumi.Input<pulumi.Input<inputs.DataSourceSecureJsonData>[]>;
    /**
     * The data source type. Must be one of the data source
     * keywords supported by the Grafana server.
     */
    readonly type?: pulumi.Input<string>;
    /**
     * The URL for the data source. The type of URL required
     * varies depending on the chosen data source type.
     */
    readonly url?: pulumi.Input<string>;
    /**
     * The username to use to
     * authenticate to the data source.
     */
    readonly username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataSource resource.
 */
export interface DataSourceArgs {
    /**
     * The method by which the browser-based Grafana
     * application will access the data source. The default is "proxy", which means
     * that the application will make requests via a proxy endpoint on the Grafana
     * server.
     */
    readonly accessMode?: pulumi.Input<string>;
    /**
     * - If true, HTTP basic authentication will
     * be used to make requests.
     */
    readonly basicAuthEnabled?: pulumi.Input<boolean>;
    /**
     * The
     * password to use for basic auth.
     */
    readonly basicAuthPassword?: pulumi.Input<string>;
    /**
     * The
     * username to use for basic auth.
     */
    readonly basicAuthUsername?: pulumi.Input<string>;
    /**
     * The name of the
     * database to use on the selected data source server.
     */
    readonly databaseName?: pulumi.Input<string>;
    /**
     * If true, the data source will be the default
     * source used by the Grafana server. Only one data source on a server can be
     * the default.
     */
    readonly isDefault?: pulumi.Input<boolean>;
    /**
     * The default region
     * and authentication type to access the data source. `jsonData` is documented
     * in more detail below.
     */
    readonly jsonDatas?: pulumi.Input<pulumi.Input<inputs.DataSourceJsonData>[]>;
    /**
     * A unique name for the data source within the Grafana
     * server.
     */
    readonly name?: pulumi.Input<string>;
    /**
     * The password to use to
     * authenticate to the data source.
     */
    readonly password?: pulumi.Input<string>;
    /**
     * The access and
     * secret keys required to access the data source. `secureJsonData` is
     * documented in more detail below.
     */
    readonly secureJsonDatas?: pulumi.Input<pulumi.Input<inputs.DataSourceSecureJsonData>[]>;
    /**
     * The data source type. Must be one of the data source
     * keywords supported by the Grafana server.
     */
    readonly type: pulumi.Input<string>;
    /**
     * The URL for the data source. The type of URL required
     * varies depending on the chosen data source type.
     */
    readonly url?: pulumi.Input<string>;
    /**
     * The username to use to
     * authenticate to the data source.
     */
    readonly username?: pulumi.Input<string>;
}
